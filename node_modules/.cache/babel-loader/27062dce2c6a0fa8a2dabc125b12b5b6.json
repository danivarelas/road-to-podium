{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/web-dev-program/week 5/react-project/src/contexts/RecordsContext/RecordsContext.js\";\nimport React, { createContext, Component } from 'react';\nexport const RecordsContext = createContext();\n\nclass RecordsContextProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      runningRecords: JSON.parse(localStorage.getItem('runningRecords')),\n      swimmingRecords: JSON.parse(localStorage.getItem('swimmingRecords')),\n      cyclingRecords: JSON.parse(localStorage.getItem('cyclingRecords')),\n      triathlonRecords: JSON.parse(localStorage.getItem('triathlonRecords'))\n    };\n\n    this.addRecord = (activity, date, distance, time) => {\n      let records = [];\n\n      switch (activity) {\n        case 'Running':\n          records = JSON.parse(localStorage.getItem('runningRecords'));\n          records = this.updateRecord(distance, date, time, records);\n          this.setState({\n            runningRecords: records\n          });\n          localStorage.setItem('runningRecords', JSON.stringify(records));\n          break;\n\n        case 'Swimming':\n          records = JSON.parse(localStorage.getItem('swimmingRecords'));\n          records = this.updateRecord(distance, date, time, records);\n          this.setState({\n            swimmingRecords: records\n          });\n          localStorage.setItem('swimmingRecords', JSON.stringify(records));\n          break;\n\n        case 'Cycling':\n          records = JSON.parse(localStorage.getItem('cyclingRecords'));\n          records = this.updateRecord(distance, date, time, records);\n          this.setState({\n            cyclingRecords: records\n          });\n          localStorage.setItem('cyclingRecords', JSON.stringify(records));\n          break;\n\n        case 'Triathlon':\n          records = JSON.parse(localStorage.getItem('triathlonRecords'));\n          records = this.updateRecord(distance, date, time, records);\n          this.setState({\n            triathlonRecords: records\n          });\n          localStorage.setItem('triathlonRecords', JSON.stringify(records));\n          break;\n\n        default:\n      }\n    };\n\n    this.updateRecord = (distance, date, time, records) => {\n      let found = false;\n      let newRecords = [];\n\n      if (records) {\n        newRecords = records.map(record => {\n          if (record.distance === distance) {\n            record.date = date;\n            record.time = time;\n            found = true;\n          }\n\n          return record;\n        });\n      }\n\n      if (!found) {\n        newRecords = [...newRecords, {\n          date: date,\n          distance: distance,\n          time: time\n        }];\n      }\n\n      return newRecords;\n    };\n  }\n\n  render() {\n    return React.createElement(RecordsContext.Provider, {\n      value: { ...this.state,\n        addRecord: this.addRecord\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nexport default RecordsContextProvider;","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 5/react-project/src/contexts/RecordsContext/RecordsContext.js"],"names":["React","createContext","Component","RecordsContext","RecordsContextProvider","state","runningRecords","JSON","parse","localStorage","getItem","swimmingRecords","cyclingRecords","triathlonRecords","addRecord","activity","date","distance","time","records","updateRecord","setState","setItem","stringify","found","newRecords","map","record","render","props","children"],"mappings":"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","sourcesContent":["import React, { createContext, Component } from 'react';\n\nexport const RecordsContext = createContext();\n\nclass RecordsContextProvider extends Component {\n\n    state = {\n        runningRecords: JSON.parse(localStorage.getItem('runningRecords')),\n        swimmingRecords: JSON.parse(localStorage.getItem('swimmingRecords')),\n        cyclingRecords: JSON.parse(localStorage.getItem('cyclingRecords')),\n        triathlonRecords: JSON.parse(localStorage.getItem('triathlonRecords'))\n    };\n    \n    addRecord = (activity, date, distance, time) => {\n        let records = [];\n        switch (activity) {\n            case 'Running':\n                records = JSON.parse(localStorage.getItem('runningRecords'));\n                records = this.updateRecord(distance, date, time, records);\n                this.setState({ runningRecords: records });\n                localStorage.setItem('runningRecords', JSON.stringify(records));\n                break;\n            case 'Swimming':\n                records = JSON.parse(localStorage.getItem('swimmingRecords'));\n                records = this.updateRecord(distance, date, time, records);\n                this.setState({ swimmingRecords: records });\n                localStorage.setItem('swimmingRecords', JSON.stringify(records));\n                break;\n            case 'Cycling':\n                records = JSON.parse(localStorage.getItem('cyclingRecords'));\n                records = this.updateRecord(distance, date, time, records);\n                this.setState({ cyclingRecords: records });\n                localStorage.setItem('cyclingRecords', JSON.stringify(records));\n                break;\n            case 'Triathlon':\n                records = JSON.parse(localStorage.getItem('triathlonRecords'));\n                records = this.updateRecord(distance, date, time, records);\n                this.setState({ triathlonRecords: records });\n                localStorage.setItem('triathlonRecords', JSON.stringify(records));\n                break;\n            default:\n        }\n    };\n\n    updateRecord = (distance, date, time, records) => {\n        let found = false;\n        let newRecords = [];\n        if (records) {\n            newRecords = records.map(record => {\n                if(record.distance === distance) {\n                    record.date = date;\n                    record.time = time;\n                    found = true;\n                }\n                return record;\n            });\n        }\n        if (!found) {\n            newRecords = [...newRecords, {\n                date: date,\n                distance: distance,\n                time: time\n            }];\n        }\n        return newRecords;\n    };\n\n    render() {\n        return (\n            <RecordsContext.Provider value={{\n                ...this.state,\n                addRecord: this.addRecord\n            }}>\n                {this.props.children}\n            </RecordsContext.Provider>\n        );\n    }\n}\n\nexport default RecordsContextProvider;"]},"metadata":{},"sourceType":"module"}