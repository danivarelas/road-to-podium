{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/web-dev-program/week 5/react-project/src/pages/Calendar/Calendar.js\";\nimport React, { useState } from \"react\";\nimport { addDays, addMonths, subMonths, format, parse, startOfWeek, startOfMonth, endOfWeek, endOfMonth, isSameDay, isSameMonth } from 'date-fns';\nimport \"./Calendar.scss\";\nimport NavBar from '../../components/NavBar/NavBar';\n\nfunction Calendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  const header = () => {\n    const dateFormat = \"MMM yyyy\";\n    return React.createElement(\"div\", {\n      className: \"header row flex-middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column col-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"icon\",\n      onClick: prevMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"chevron_left\")), React.createElement(\"div\", {\n      className: \"column col-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, format(currentDate, dateFormat))), React.createElement(\"div\", {\n      className: \"column col-end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"icon\",\n      onClick: nextMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"chevron_right\")));\n  };\n\n  const daysOfWeek = () => {\n    const daysOfWeek = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"];\n    const days = [];\n\n    for (let i = 0; i < 7; i++) {\n      days.push(React.createElement(\"div\", {\n        className: \"column col-center day-title\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, daysOfWeek[i]));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"days row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, days);\n  };\n\n  const cells = () => {\n    const monthStart = startOfMonth(currentDate);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n    const dateFormat = \"d\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat);\n        const cloneDay = day;\n        days.push(React.createElement(\"div\", {\n          className: `column cell ${!isSameMonth(day, monthStart) ? \"disabled\" : isSameDay(day, selectedDate) ? \"selected\" : \"\"}`,\n          key: day,\n          onClick: () => onDateClick(cloneDay),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"number\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, formattedDate), React.createElement(\"span\", {\n          className: \"number-bg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, formattedDate)));\n        day = addDays(day, 1);\n      }\n\n      rows.push(React.createElement(\"div\", {\n        className: \"row\",\n        key: day,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \" \", days, \" \"));\n      days = [];\n    }\n\n    return React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, rows);\n  };\n\n  const nextMonth = () => {\n    setCurrentDate(addMonths(currentDate, 1));\n  };\n\n  const prevMonth = () => {\n    setCurrentDate(subMonths(currentDate, 1));\n  };\n\n  const onDateClick = day => {\n    setSelectedDate(day);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(NavBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"calendar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, header()), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, daysOfWeek()), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, cells())));\n}\n\nexport default Calendar;","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 5/react-project/src/pages/Calendar/Calendar.js"],"names":["React","useState","addDays","addMonths","subMonths","format","parse","startOfWeek","startOfMonth","endOfWeek","endOfMonth","isSameDay","isSameMonth","NavBar","Calendar","currentDate","setCurrentDate","Date","selectedDate","setSelectedDate","header","dateFormat","prevMonth","nextMonth","daysOfWeek","days","i","push","cells","monthStart","monthEnd","startDate","endDate","rows","day","formattedDate","cloneDay","onDateClick"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    addDays,\n    addMonths,\n    subMonths,\n    format,\n    parse,\n    startOfWeek,\n    startOfMonth,\n    endOfWeek,\n    endOfMonth,\n    isSameDay,\n    isSameMonth\n} from 'date-fns';\nimport \"./Calendar.scss\";\nimport NavBar from '../../components/NavBar/NavBar';\n\nfunction Calendar() {\n\n    const [currentDate, setCurrentDate] = useState(new Date())\n    const [selectedDate, setSelectedDate] = useState(new Date())\n\n    const header = () => {\n        const dateFormat = \"MMM yyyy\";\n        return (\n            <div className=\"header row flex-middle\">\n                <div className=\"column col-start\">\n                    <div className=\"icon\" onClick={prevMonth}>\n                        chevron_left\n                 </div>\n                </div>\n                <div className=\"column col-center\">\n                    <span>{format(currentDate, dateFormat)}</span>\n                </div>\n                <div className=\"column col-end\">\n                    <div className=\"icon\" onClick={nextMonth}>\n                        chevron_right\n                 </div>\n                </div>\n            </div>\n        );\n    };\n\n    const daysOfWeek = () => {\n        const daysOfWeek = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n        const days = [];\n        for (let i = 0; i < 7; i++) {\n            days.push(\n                <div className=\"column col-center day-title\" key={i}>\n                    {daysOfWeek[i]}\n                </div>\n            );\n        }\n        return <div className=\"days row\">{days}</div>;\n    };\n\n    const cells = () => {\n        const monthStart = startOfMonth(currentDate);\n        const monthEnd = endOfMonth(monthStart);\n        const startDate = startOfWeek(monthStart);\n        const endDate = endOfWeek(monthEnd);\n        const dateFormat = \"d\";\n        const rows = []; let days = [];\n        let day = startDate;\n        let formattedDate = \"\";\n        while (day <= endDate) {\n            for (let i = 0; i < 7; i++) {\n                formattedDate = format(day, dateFormat);\n                const cloneDay = day;\n                days.push(\n                    <div\n                        className={`column cell ${!isSameMonth(day, monthStart)\n                            ? \"disabled\" : isSameDay(day, selectedDate)\n                                ? \"selected\" : \"\"}`}\n                        key={day}\n                        onClick={() => onDateClick(cloneDay)}\n                    >\n                        <span className=\"number\">{formattedDate}</span>\n                        <span className=\"number-bg\">{formattedDate}</span>\n                    </div>\n                );\n                day = addDays(day, 1);\n            } rows.push(\n                <div className=\"row\" key={day}> {days} </div>\n            );\n            days = [];\n        }\n        return <div className=\"body\">{rows}</div>;\n    };\n\n    const nextMonth = () => {\n        setCurrentDate(addMonths(currentDate, 1));\n    };\n\n    const prevMonth = () => {\n        setCurrentDate(subMonths(currentDate, 1));\n    };\n\n    const onDateClick = day => {\n        setSelectedDate(day);\n    }\n\n    return (\n        <div>\n            <NavBar></NavBar>\n            <div className=\"calendar\">\n                <div>{header()}</div>\n                <div>{daysOfWeek()}</div>\n                <div>{cells()}</div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}