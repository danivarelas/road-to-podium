{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/web-dev-program/week 5/react-project/src/pages/Calendar/Calendar.js\";\nimport React, { useState, useContext } from \"react\";\nimport { addDays, addMonths, subMonths, format, startOfWeek, startOfMonth, endOfWeek, endOfMonth, isSameDay, isSameMonth } from 'date-fns';\nimport \"./Calendar.scss\";\nimport NavBar from '../../components/NavBar/NavBar';\nimport CalendarSubheader from \"../../components/CalendarSubheader/CalendarSubheader\";\nimport { RacesContext } from \"../../contexts/RacesContext/RacesContext\";\nimport { GoalsContext } from \"../../contexts/GoalsContext/GoalsContext\";\nimport MenuHeader from \"../../components/MenuHeader/MenuHeader\";\nimport { RecordsContext } from \"../../contexts/RecordsContext/RecordsContext\";\n\nfunction Calendar() {\n  window.scrollTo(0, 0);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const {\n    allRaces\n  } = useContext(RacesContext);\n  const {\n    allGoals\n  } = useContext(GoalsContext);\n  const {\n    runningRecords,\n    swimmingRecords,\n    cyclingRecords,\n    triathlonRecords\n  } = useContext(RecordsContext);\n\n  const header = () => {\n    const dateFormat = \"MMM yyyy\";\n    return React.createElement(\"div\", {\n      className: \"header row flex-middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column col-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"icon\",\n      onClick: prevMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"chevron_left\")), React.createElement(\"div\", {\n      className: \"column col-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, format(currentDate, dateFormat))), React.createElement(\"div\", {\n      className: \"column col-end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"icon\",\n      onClick: nextMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"chevron_right\")));\n  };\n\n  const cells = () => {\n    const monthStart = startOfMonth(currentDate);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n    const dateFormat = \"d\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat);\n        const cloneDay = day;\n        const newDate = format(day, 'yyyy-MM-dd');\n        const races = renderRaceBadges(newDate);\n        const goals = renderGoalBadges(newDate);\n        const records = renderRecordBadges(newDate);\n        days.push(React.createElement(\"div\", {\n          className: `column cell ${!isSameMonth(day, monthStart) ? \"disabled\" : isSameDay(day, selectedDate) ? \"selected\" : \"\"}`,\n          key: day,\n          onClick: () => onDateClick(cloneDay),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"number\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, formattedDate), races, goals, records));\n        day = addDays(day, 1);\n      }\n\n      rows.push(React.createElement(\"div\", {\n        className: \"row\",\n        key: day,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \" \", days, \" \"));\n      days = [];\n    }\n\n    return React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, rows);\n  };\n\n  const nextMonth = () => {\n    setCurrentDate(addMonths(currentDate, 1));\n  };\n\n  const prevMonth = () => {\n    setCurrentDate(subMonths(currentDate, 1));\n  };\n\n  const onDateClick = day => {\n    setSelectedDate(day);\n  };\n\n  const renderRaceBadges = currentDate => {\n    if (allRaces && allRaces.length) {\n      return allRaces.map(race => {\n        if (currentDate === race.date) {\n          switch (race.type) {\n            case 'Running':\n              return React.createElement(\"span\", {\n                key: race.name,\n                className: \"badge badge-pill badge-info\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 112\n                },\n                __self: this\n              }, race.name);\n\n            case 'Cycling':\n              return React.createElement(\"span\", {\n                key: race.name,\n                className: \"badge badge-pill badge-purple\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 116\n                },\n                __self: this\n              }, race.name);\n\n            case 'Swimming':\n              return React.createElement(\"span\", {\n                key: race.name,\n                className: \"badge badge-pill badge-primary\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 120\n                },\n                __self: this\n              }, race.name);\n\n            case 'Triathlon':\n              return React.createElement(\"span\", {\n                key: race.name,\n                className: \"badge badge-pill badge-dark\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 124\n                },\n                __self: this\n              }, race.name);\n\n            default:\n              break;\n          }\n        }\n\n        return null;\n      });\n    }\n  };\n\n  const renderGoalBadges = currentDate => {\n    if (allGoals && allGoals.length) {\n      return allGoals.map(goal => {\n        if (currentDate === goal.date) {\n          if (goal.completed) {\n            return React.createElement(\"span\", {\n              key: goal.description,\n              className: \"badge badge-pill badge-success\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 141\n              },\n              __self: this\n            }, goal.description);\n          } else {\n            return React.createElement(\"span\", {\n              key: goal.description,\n              className: \"badge badge-pill badge-danger\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 145\n              },\n              __self: this\n            }, goal.description);\n          }\n        }\n\n        return null;\n      });\n    }\n  };\n\n  const renderRecordBadges = currentDate => {\n    let records = [];\n\n    if (runningRecords) {\n      records = [...records, ...runningRecords];\n    }\n\n    if (cyclingRecords) {\n      records = [...records, ...cyclingRecords];\n    }\n\n    if (swimmingRecords) {\n      records = [...records, ...swimmingRecords];\n    }\n\n    if (triathlonRecords) {\n      records = [...records, ...triathlonRecords];\n    }\n\n    if (records && records.length) {\n      return records.map(record => {\n        if (currentDate === record.date) {\n          return React.createElement(\"span\", {\n            key: record.activity + record.distance,\n            className: \"badge badge-pill badge-warning\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172\n            },\n            __self: this\n          }, record.activity + \": \" + record.distance);\n        }\n\n        return null;\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(NavBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }), React.createElement(MenuHeader, {\n    title: \"Calendar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"calendar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, header()), React.createElement(CalendarSubheader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, cells())), React.createElement(\"div\", {\n    className: \"card-flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"Labels Description\"), React.createElement(\"span\", {\n    className: \"badge badge-pill badge-success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"Completed Goals\"), React.createElement(\"span\", {\n    className: \"badge badge-pill badge-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Pending Goals\"), React.createElement(\"span\", {\n    className: \"badge badge-pill badge-warning\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"Records\"), React.createElement(\"span\", {\n    className: \"badge badge-pill badge-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Running Races\"), React.createElement(\"span\", {\n    className: \"badge badge-pill badge-purple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"Cycling Races\"), React.createElement(\"span\", {\n    className: \"badge badge-pill badge-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"Swimming Races\"), React.createElement(\"span\", {\n    className: \"badge badge-pill badge-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"Triathlon Races\")));\n}\n\nexport default Calendar;","map":{"version":3,"sources":["/Users/user/Desktop/web-dev-program/week 5/react-project/src/pages/Calendar/Calendar.js"],"names":["React","useState","useContext","addDays","addMonths","subMonths","format","startOfWeek","startOfMonth","endOfWeek","endOfMonth","isSameDay","isSameMonth","NavBar","CalendarSubheader","RacesContext","GoalsContext","MenuHeader","RecordsContext","Calendar","window","scrollTo","currentDate","setCurrentDate","Date","selectedDate","setSelectedDate","allRaces","allGoals","runningRecords","swimmingRecords","cyclingRecords","triathlonRecords","header","dateFormat","prevMonth","nextMonth","cells","monthStart","monthEnd","startDate","endDate","rows","days","day","formattedDate","i","cloneDay","newDate","races","renderRaceBadges","goals","renderGoalBadges","records","renderRecordBadges","push","onDateClick","length","map","race","date","type","name","goal","completed","description","record","activity","distance"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport {\n    addDays,\n    addMonths,\n    subMonths,\n    format,\n    startOfWeek,\n    startOfMonth,\n    endOfWeek,\n    endOfMonth,\n    isSameDay,\n    isSameMonth\n} from 'date-fns';\nimport \"./Calendar.scss\";\nimport NavBar from '../../components/NavBar/NavBar';\nimport CalendarSubheader from \"../../components/CalendarSubheader/CalendarSubheader\";\nimport { RacesContext } from \"../../contexts/RacesContext/RacesContext\";\nimport { GoalsContext } from \"../../contexts/GoalsContext/GoalsContext\";\nimport MenuHeader from \"../../components/MenuHeader/MenuHeader\";\nimport { RecordsContext } from \"../../contexts/RecordsContext/RecordsContext\";\n\nfunction Calendar() {\n\n    window.scrollTo( 0, 0 );\n\n    const [currentDate, setCurrentDate] = useState(new Date());\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const { allRaces } = useContext(RacesContext);\n    const { allGoals } = useContext(GoalsContext);\n    const { runningRecords,\n        swimmingRecords,\n        cyclingRecords,\n        triathlonRecords } = useContext(RecordsContext);\n\n    const header = () => {\n        const dateFormat = \"MMM yyyy\";\n        return (\n            <div className=\"header row flex-middle\">\n                <div className=\"column col-start\">\n                    <div className=\"icon\" onClick={prevMonth}>\n                        chevron_left\n                 </div>\n                </div>\n                <div className=\"column col-center\">\n                    <span>{format(currentDate, dateFormat)}</span>\n                </div>\n                <div className=\"column col-end\">\n                    <div className=\"icon\" onClick={nextMonth}>\n                        chevron_right\n                 </div>\n                </div>\n            </div>\n        );\n    };\n\n    const cells = () => {\n        const monthStart = startOfMonth(currentDate);\n        const monthEnd = endOfMonth(monthStart);\n        const startDate = startOfWeek(monthStart);\n        const endDate = endOfWeek(monthEnd);\n        const dateFormat = \"d\";\n        const rows = []; let days = [];\n        let day = startDate;\n        let formattedDate = \"\";\n        while (day <= endDate) {\n            for (let i = 0; i < 7; i++) {\n                formattedDate = format(day, dateFormat);\n                const cloneDay = day;\n                const newDate = format(day, 'yyyy-MM-dd');\n                const races = renderRaceBadges(newDate);\n                const goals = renderGoalBadges(newDate);\n                const records = renderRecordBadges(newDate);\n                days.push(\n                    <div className={`column cell ${!isSameMonth(day, monthStart) ? \"disabled\" : isSameDay(day, selectedDate) ? \"selected\" : \"\"}`}\n                        key={day}\n                        onClick={() => onDateClick(cloneDay)} >\n                        <span className=\"number\">{formattedDate}</span>\n                        {races}\n                        {goals}\n                        {records}\n                    </div>\n                );\n                day = addDays(day, 1);\n            }\n            rows.push(\n                <div className=\"row\" key={day}> {days} </div>\n            );\n            days = [];\n        }\n        return <div className=\"body\">{rows}</div>;\n    };\n\n    const nextMonth = () => {\n        setCurrentDate(addMonths(currentDate, 1));\n    };\n\n    const prevMonth = () => {\n        setCurrentDate(subMonths(currentDate, 1));\n    };\n\n    const onDateClick = day => {\n        setSelectedDate(day);\n    }\n\n    const renderRaceBadges = currentDate => {\n        if (allRaces && allRaces.length) {\n            return allRaces.map( race => {\n                if (currentDate === race.date) {\n                    switch(race.type) {\n                        case 'Running':\n                            return (\n                                <span key={race.name} className=\"badge badge-pill badge-info\">{race.name}</span>\n                            );\n                        case 'Cycling':\n                            return (\n                                <span key={race.name} className=\"badge badge-pill badge-purple\">{race.name}</span>\n                            );\n                        case 'Swimming':\n                            return (\n                                <span key={race.name} className=\"badge badge-pill badge-primary\">{race.name}</span>\n                            );\n                        case 'Triathlon':\n                            return (\n                                <span key={race.name} className=\"badge badge-pill badge-dark\">{race.name}</span>\n                            );\n                        default:\n                            break;\n                    }\n                }\n                return(null);\n            })\n        }\n    }\n\n    const renderGoalBadges = currentDate => {\n        if (allGoals && allGoals.length) {\n            return allGoals.map( goal => {\n                if (currentDate === goal.date) {\n                    if (goal.completed) {\n                        return (\n                            <span key={goal.description} className=\"badge badge-pill badge-success\" >{goal.description}</span>\n                        );\n                    } else {\n                        return (\n                            <span key={goal.description} className=\"badge badge-pill badge-danger\" >{goal.description}</span>\n                        );\n                    }\n                }\n                return(null);\n            })\n        }\n    }\n\n    const renderRecordBadges = currentDate => {\n        let records = [];\n        if (runningRecords) {\n            records = [...records, ...runningRecords];\n        }\n        if (cyclingRecords) {\n            records = [...records, ...cyclingRecords];\n        }\n        if (swimmingRecords) {\n            records = [...records, ...swimmingRecords];\n        }\n        if (triathlonRecords) {\n            records = [...records, ...triathlonRecords];\n        }\n        if (records && records.length) {\n            return records.map( record => {\n                if (currentDate === record.date) {\n                        return (\n                            <span key={record.activity + record.distance} className=\"badge badge-pill badge-warning\" >{record.activity + \": \" + record.distance}</span>\n                        );\n                }\n                return(null);\n            })\n        }\n    }\n\n    return (\n        <div>\n            <NavBar></NavBar>\n            <MenuHeader title=\"Calendar\"/>\n            <div className=\"calendar\">\n                <div>{header()}</div>\n                <CalendarSubheader></CalendarSubheader>\n                <div>{cells()}</div>\n            </div>\n                <div className=\"card-flex\">\n                    <h5>Labels Description</h5>\n                    <span className=\"badge badge-pill badge-success\">Completed Goals</span>\n                    <span className=\"badge badge-pill badge-danger\">Pending Goals</span>\n                    <span className=\"badge badge-pill badge-warning\">Records</span>\n                    <span className=\"badge badge-pill badge-info\">Running Races</span>\n                    <span className=\"badge badge-pill badge-purple\">Cycling Races</span>\n                    <span className=\"badge badge-pill badge-primary\">Swimming Races</span>\n                    <span className=\"badge badge-pill badge-dark\">Triathlon Races</span>\n                </div>\n        </div>\n    );\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}